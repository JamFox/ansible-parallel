#!/bin/bash
# Script Name: ansible-parallel
# Description: Script to automate running multiple ansible playbooks.
# Run with -h flag to see usage.

# Global variables
## Changing vars lowercase
exec_path=$PWD
output_path=
cfg_path="$exec_path/ansible-parallel.cfg"
log_dir=
branch=
refresh=false
skip_unreachable=false
ansible_arg_list=
playbooks_to_run=
playbooks_to_match=
playbook_path_list=
run_all_playbooks=false
timestamp=$(date +"%Y-%m-%d_%Hh%Mm%Ss")
galaxy_force_upgrade_req_flag="--force"
## Fixed vars uppercase, defined in config file
PREFIXES="group_,host_"
RELATIVE_LOG_PATH=logs
LOG_RETENTION_IN_DAYS=60
RELATIVE_INVENTORY_PATH=hosts
RELATIVE_TMP_PATH=tmp
ANSIBLE_REPO_URL=
ANSIBLE_MAIN_DIR=/opt/ansible
DEFAULT_BRANCH=master
POST_RUN_COMMAND=
OUTPUT_FILE="ansible-parallel_$timestamp.log"
WAIT_FOR_CPU=false

# Usage display function
Help()
{
   echo "Script to automate running ansible playbooks."
   echo "Executes playbooks from your current directory, from specified path or from default path $exec_path."
   echo
   echo "Usage:"
   echo " $0 [-h] [-cfg <PATH>] [-b <BRANCH>] [-r] [-p <PLAYBOOKS>] [-m <PATTERN>] [-a] [-e <PATH>] [-o <PATH>] [-s] [any 'ansible-playbook' arguments]"
   echo "Options:"
   echo " -h    Print this help and exit"
   echo " -cfg  Define path to script config, default is $cfg_path"
   echo " -b    Select branch to use, default is $DEFAULT_BRANCH"
   echo " -r    Refresh repository from remote before running"
   echo " -p    Comma separated list of playbooks to run, omit host or group prefix"
   echo " -m    Run all playbooks that match the supplied pattern"
   echo " -a    Run all playbooks"
   echo " -w    Path to ansible project to run, default is $exec_path or $ANSIBLE_MAIN_DIR"
   echo " -o    Path to logs output directory"
   echo " -s    Skip unreachable hosts (takes 1sec longer for each host)"
   echo " -g    Don't force upgrade of ansible-galaxy requirements"
   echo " *     Any extra args are considered 'ansible-playbook' args"
   echo
}

log() {
  local log_level="$1"
  shift
  local message="$@"

  if [ "$log_level" != "info" ]; then
    echo "$message" >&2  # Redirect to stderr
  else
    echo "$message"
  fi
  logger -p "user.$log_level" -t ansible-parallel "$message"
}

# Exit function with post-run command before exiting
function exit_with_post() {
    log info "Running post exit commands and cleanup."

    # Cleanup
    if [ -d "$tmp_dir" ]; then
        log info "Cleaning temp directory $tmp_dir"
        rm -rf $tmp_dir
    fi
    if [ -d "$log_dir" ]; then
        log info "Cleaning logs older than $LOG_RETENTION_IN_DAYS days."
        find $log_dir -type f -mtime +$LOG_RETENTION_IN_DAYS -delete
    fi

    # Run post command
    if [[ -z $POST_RUN_COMMAND ]]
    then 
        log info "No post run command specified."
    else
        log info "Running post run command."
        eval "$POST_RUN_COMMAND"
    fi

    log info "Run finished by $(whoami), check logs at $(hostname):$ansible_path/$RELATIVE_LOG_PATH"

    # Exit with specified exit code
    local exit_code=$1
    exit $exit_code
}

# Manage arguments
while [[ -n $1 ]]
do
    case $1 in
    (-h)
        Help
        exit 0
    ;;
    (-cfg)
        shift
        cfg_path=$1
    ;;
    (-b)
        shift
        branch=$1
    ;;
    (-r)
        refresh=true
    ;;
    (-p)
        shift
        playbooks_to_run=$1
    ;;
    (-m)
        shift
        playbooks_to_match=$1
    ;;
    (-a)
        run_all_playbooks=true
    ;;
    (-w)
        shift
        exec_path=$1
    ;;
    (-o)
        shift
        log_dir=$1
    ;;
    (-s)
        skip_unreachable=true
    ;;
    (-g)
        galaxy_force_upgrade_req_flag=""
    ;;
    (*)
        ansible_arg_list="$ansible_arg_list $1"
    ;;
    esac
    shift
done

# Trap exit signal to run post-run command and cleanup
trap exit_with_post EXIT

# Check if config file exists
if [[ -e $cfg_path ]]
then
    . $cfg_path
else
    log error "Config file $cfg_path not found!" >&2
    exit 1
fi

# Set default branch if not specified
branch=${branch:=$DEFAULT_BRANCH}

# Check for any other instances of current script
pseudopid="`pgrep -f $0 -l`"
actualpid="$(echo "$pseudopid" | grep -v 'sudo' | awk -F ' ' '{print $1}')"
if [[ `echo $actualpid` != "$$" ]]; then
    log warning "$0 is already running or open in another process!" >&2
    exit 2
fi

# Determine execution directory
if [[ -e $exec_path/ansible.cfg ]]
then
    ansible_path=$exec_path
elif [[ -e $ANSIBLE_MAIN_DIR/ansible.cfg ]]
then
    ansible_path=$ANSIBLE_MAIN_DIR
else
    ansible_path=$ANSIBLE_MAIN_DIR
    # Clone ansible repo if not found
    git clone $ANSIBLE_REPO_URL $ansible_path
    if [ $? -ne 0 ]; then
        log error "Unable to clone ${ANSIBLE_REPO_URL#*@} to $ansible_path" >&2
        exit 1
    fi
fi

# Set inventory file path if not specified
if [[ -z $inventory_file ]]
then
    inventory_file="$ansible_path/$RELATIVE_INVENTORY_PATH"
fi
# Set tmp dir if not specified
if [[ -z $tmp_dir ]]
then
    tmp_dir="$ansible_path/$RELATIVE_TMP_PATH"
fi
# Set log dir if not specified
if [[ -z $log_dir ]]
then
    log_dir="$ansible_path/$RELATIVE_LOG_PATH"
fi
# Set output log path if not specified
if [[ -z $output_path ]]
then
    output_path="$log_dir/$OUTPUT_FILE"
fi

# Create log directory if it does not exist
if [ ! -d "$log_dir" ]; then
    mkdir -p "$log_dir"
    log info "Created log directory $log_dir"
fi
# Create tmp directory if it does not exist
if [ ! -d "$tmp_dir" ]; then
    mkdir -p "$tmp_dir"
    log info "Created tmp directory $tmp_dir"
fi

# Create output file and redirect stdout and stderr to it as well as terminal
touch $output_path
if [ $? -ne 0 ]; then
    log error "Unable to create output file $output_path" >&2
    exit 1
fi
exec 3>&1 1> >(tee -a ${output_path}) 2>&1

log info "Executing from: $(whoami)@$(hostname):$ansible_path"

# Pull latest if argument set
if [[ $refresh == true ]]
then
    cd $ansible_path
    git fetch --all
    git reset --hard HEAD
    git pull
    if [ $? -ne 0 ]; then
        log warning "Unable to pull latest branch $branch at ${ANSIBLE_REPO_URL#*@}"
        log warning "Continuing without pulling latest..."
    fi
fi

# Checkout default or specified branch
cd $ansible_path
log info "Checking out branch $branch at ${ANSIBLE_REPO_URL#*@}"
git fetch --all
git checkout $branch
if [ $? -ne 0 ]; then
    log error "Unable to checkout branch $branch at ${ANSIBLE_REPO_URL#*@}" >&2
    exit 1
fi

# Display last commit
log info "Last commit: $(git log -1 --format='%h %ci %s')"

# Install requirements if requirements file exists
if [[ -f $ansible_path/requirements.yml ]]
then
    log info "Installing requirements from $ansible_path/requirements.yml..."
    ansible-galaxy install -r $ansible_path/requirements.yml $galaxy_force_upgrade_req_flag
    if [ $? -ne 0 ]; then
        log error "Unable to install requirements" >&2
        exit 1
    fi
fi

# Define the function to check if a playbook exists
function add_playbook {
    # Get the playbook path
    playbook_path="$ansible_path/playbooks/$1/main.yml"
    # Check if the playbook file exists
    if [[ -f "$playbook_path" ]]; then
        # Add the playbook path to the list
        playbook_path_list+="$playbook_path"$'\n'
    fi
}

# Add playbooks that match the search string
if [[ -n $playbooks_to_match && $run_all_playbooks == false ]]
then
    # Loop over the playbook directories
    for playbook in "$ansible_path"/playbooks/*/; do
        # Extract the name of the playbook
        playbook_name=$(basename "$playbook")
        # Check if the playbook name contains the search string
        if [[ "$playbook_name" == *"$playbooks_to_match"* ]]; then
            add_playbook $playbook_name
        fi
    done
fi

# Add playbooks that are specified or else all playbooks
if [[ -z $playbooks_to_run && -z $playbooks_to_match && $run_all_playbooks == false ]]
then
    log error "No playbooks specified! Use -h flag to see usage help." >&2
    exit 1
elif [[ -n $playbooks_to_run && $run_all_playbooks == false ]]
then
    # If playbooks specified, run only those
    for playbook in $(echo "$playbooks_to_run" | tr ',' ' '); do
        for prefix in $(echo "$PREFIXES" | tr ',' ' '); do
            add_playbook $prefix$playbook
        done
    done
elif [[ $run_all_playbooks == true ]]
then
    # Run all playbooks
    for playbook in $(ls $ansible_path/playbooks)
    do
        for prefix in $(echo $PREFIXES | tr ',' ' ')
        do
            if [[ $playbook == *"$prefix"* ]]; then
                add_playbook $playbook
                break
            fi
        done
    done
fi

# Remove duplicates from playbook list
playbook_path_list=$(echo "$playbook_path_list" | awk '!x[$0]++')

# If no playbooks found
if [[ -z $playbook_path_list ]]
then
    log warning "No playbooks found, nothing done"
    exit 2
fi

# Display playbooks to execute
log info "Playbooks to execute:"
for playbook_path in $playbook_path_list
do
    log info "    $playbook_path"
done
log info "Executing with arguments:"
log info "    $ansible_arg_list"

# Loop through each playbook path in the list
pids=""
while IFS= read -r playbook_path; do
    # Use temp hosts file only if arg is true and is not a host playbook
    if [[ $skip_unreachable == true && "$playbook_path" != *"host_"* ]]
    then
        # Find the host group in the playbook
        host_group=$(grep -m1 '^  hosts:' "$playbook_path" | sed 's/.* //')
        # Check the inventory file for the host group
        hosts=$(sed -n "/^\[$host_group\]/,/^$/p" "$inventory_file" | grep -vE '^\s*#|^$' | awk '{print $1" "$2}')
        # Create a temporary inventory file with host group
        reachable_hosts_file="$tmp_dir/${host_group}.tmp"
        echo "[$host_group]" > $reachable_hosts_file
        # Check reachability of hosts
        log info "Generating temp reachable hosts inventory ${reachable_hosts_file} file..."
        while read line; do
        if [[ $line == *ansible_host=* ]]; then
            # Extract the hostname
            hostname=$(echo $line | cut -d ' ' -f 1)
            # Extract the IP address
            ip=$(echo $line | cut -d '=' -f 2)
            # Ping the IP address
            ping -c2 -W1 "$ip" &>/dev/null
            if [ $? -eq 0 ]; then
                # Add reachable hosts to the temporary inventory file
                echo "$hostname ansible_host=$ip" >> $reachable_hosts_file
            fi
        fi
        done <<< "$hosts"
        # Set the inventory file to the temporary inventory file
        exec_inventory_file=$reachable_hosts_file
    else
        # Set the inventory file to the default inventory file
        exec_inventory_file=$inventory_file
    fi

    # Get the directory name of the playbook
    playbook_name=$(dirname "$playbook_path" | awk -F'/' '{print $(NF)}')

    # Run the command in parallel and redirect the output to a log file
    export ANSIBLE_CONFIG="$ansible_path/ansible.cfg"
    CMD="ansible-playbook -i $exec_inventory_file $ansible_arg_list"
    log info "Executing $playbook_name in the background..."
    $CMD "$playbook_path" > "$log_dir/${playbook_name}_${timestamp}.log" 2>&1 &
    pids="$pids $!"
    
    # Wait for CPU load to go down before launcing more forks
    if [ "$WAIT_FOR_CPU" = true ]; then
        while true; do
            cpu_util=$(awk -v a="$(awk '/cpu /{print $2+$4,$2+$4+$5}' /proc/stat; sleep 1)" '/cpu /{split(a,b," "); print 100*($2+$4-b[1])/($2+$4+$5-b[2])}' /proc/stat)
            cpu_util_int=$(printf "%.0f" "$cpu_util")  # Convert floating-point to integer
            
            if [ "$cpu_util_int" -lt 75 ]; then
                #log info "CPU utilization below 75%, continuing!"
                break
            else
                #log warning "CPU utilization too high at $cpu_util%. Waiting before launching more forks..."
                sleep 10
            fi
        done
    fi
done <<< "$playbook_path_list"

# Wait for all background jobs to finish
log info "Waiting for all playbooks to finish..."
wait $pids

# Output results of each playbook
while IFS= read -r playbook_path; do
    # Get the directory name of the playbook
    playbook_name=$(dirname "$playbook_path" | awk -F'/' '{print $(NF)}')
    # Get the name of the log
    log_file="$log_dir/${playbook_name}_${timestamp}.log"
    # Loop through each log file in the log directory
    if [[ -e $log_file ]]; then
        # Get the name of the log file
        log_file_name=$(basename "$log_file")
        # Output task headers, errors and changes
        log info "RESULTS FOR ${playbook_name}"
        echo -e "$(grep -iE 'changed|fatal|failed|error|warning|(\*\*\*{3,})' "$log_file" | grep -ivE 'include_tasks|included')" | while IFS= read -r line; do
            if echo "$line" | grep -qE 'changed'; then
                log notice "$line"
            elif echo "$line" | grep -qE 'fatal|failed|error'; then
                log error "$line"
            elif echo "$line" | grep -qE 'warning'; then
                log warning "$line"
            else
                log info "$line"
            fi
        done
        # Echo new line for readability
        echo
    else
        log warning "$log_file does not exist"
    fi
done <<< "$playbook_path_list"
